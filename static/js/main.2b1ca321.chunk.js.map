{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPost","setSelectedPost","className","map","post","id","title","type","cn","onClick","handleOpenPost","Loader","NewCommentForm","handleCreateComment","isCommentLoading","useState","name","body","email","comment","setComment","isNameError","setIsNameError","isEmailError","setIsEmailError","isBodyError","setIsBodyError","onAddComment","e","preventDefault","isNameValid","trim","isEmailValid","isBodyValid","prevComment","onSubmit","htmlFor","placeholder","value","onChange","target","handleChangeName","handleChangeEmail","handleChangeBody","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","a","method","data","options","JSON","stringify","headers","all","fetch","response","ok","json","reject","client","deleteComment","commentId","PostDetails","comments","setComments","arePostsLoading","setArePostsLoading","isLoadingError","setIsLoadingError","isWritingComment","setIsWritingComment","setIsCommentLoading","deletingCommentId","setDeletingCommentID","loadComments","useCallback","postId","loadedComments","handleCommentDelete","prevComments","filter","newComment","newPost","useEffect","length","href","UserSelector","users","selectedUser","setSelectedUser","isActive","setIsActive","onBlur","role","user","onMouseDown","App","setUsers","setPosts","arePostLoading","setArePostLoading","loadUsers","loadedUsers","Error","loadPosts","userId","loadedPosts","noPostCondition","postListCondition","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b1ca321.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost(post: Post | null): void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const handleOpenPost = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link',\n                    { 'is-light': selectedPost?.id !== post.id },\n                  )}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {selectedPost?.id === post.id\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  handleCreateComment: (comment: CommentData) => void;\n  isCommentLoading: boolean;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  handleCreateComment,\n  isCommentLoading,\n}) => {\n  const [comment, setComment] = useState<CommentData>({\n    name: '',\n    body: '',\n    email: '',\n  });\n  const [isNameError, setIsNameError] = useState(false);\n  const [isEmailError, setIsEmailError] = useState(false);\n  const [isBodyError, setIsBodyError] = useState(false);\n\n  const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      name: e.target.value,\n    }));\n  };\n\n  const handleChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      email: e.target.value,\n    }));\n  };\n\n  const handleChangeBody = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsBodyError(false);\n    setComment(prevComment => ({\n      ...prevComment,\n      body: e.target.value,\n    }));\n  };\n\n  const handleClear = () => {\n    setComment({\n      name: '',\n      body: '',\n      email: '',\n    });\n  };\n\n  const clearAfterAdd = () => {\n    setComment(prevComment => ({\n      ...prevComment,\n      body: '',\n    }));\n  };\n\n  const onAddComment = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const isNameValid = comment.name.trim();\n    const isEmailValid = comment.email.trim();\n    const isBodyValid = comment.body.trim();\n\n    const isAllInfomationValid = (\n      isNameValid\n      && isEmailValid\n      && isBodyValid\n    );\n\n    if (!isAllInfomationValid) {\n      if (!isNameValid) {\n        setIsNameError(true);\n      }\n\n      if (!isEmailValid) {\n        setIsEmailError(true);\n      }\n\n      if (!isBodyValid) {\n        setIsBodyError(true);\n      }\n    } else {\n      handleCreateComment(comment);\n      clearAfterAdd();\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={e => onAddComment(e)}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': isNameError })}\n            value={comment.name}\n            onChange={e => handleChangeName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {isNameError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {isNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': isEmailError })}\n            value={comment.email}\n            onChange={e => handleChangeEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {isEmailError && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n        </div>\n\n        {isEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', { 'is-danger': isBodyError })}\n            value={comment.body}\n            onChange={e => handleChangeBody(e)}\n          />\n        </div>\n\n        {isBodyError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nasync function request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // DON'T change the delay it is required for tests\n  const [response] = await Promise.all([\n    fetch(BASE_URL + url, options),\n    wait(300),\n  ]);\n\n  return response.ok\n    ? response.json()\n    : Promise.reject();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport cn from 'classnames';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\nimport { addComment, deleteComment, getComments } from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [arePostsLoading, setArePostsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isWritingComment, setIsWritingComment] = useState(false);\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n  // eslint-disable-next-line max-len\n  const [deletingCommentId, setDeletingCommentID] = useState<number | null>(null);\n\n  const loadComments = useCallback(async () => {\n    setArePostsLoading(true);\n\n    try {\n      setIsLoadingError(false);\n      const loadedComments = await getComments(post.id);\n\n      setComments(loadedComments);\n    } catch {\n      setIsLoadingError(true);\n    } finally {\n      setArePostsLoading(false);\n    }\n  }, [post.id]);\n\n  const handleCommentDelete = async (commentId: number) => {\n    setDeletingCommentID(commentId);\n\n    try {\n      await deleteComment(commentId);\n\n      setComments(prevComments => (\n        prevComments.filter(comment => comment.id !== commentId)\n      ));\n    } catch {\n      setIsLoadingError(true);\n    } finally {\n      setDeletingCommentID(null);\n    }\n  };\n\n  const handleCreateComment = async (newComment: CommentData) => {\n    setIsCommentLoading(true);\n\n    try {\n      const newPost = await addComment({\n        ...newComment,\n        postId: post.id,\n      });\n\n      setComments(prevComments => [...prevComments, newPost]);\n    } catch {\n      setIsLoadingError(true);\n    } finally {\n      setIsCommentLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setIsWritingComment(false);\n  }, [loadComments, post.id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {arePostsLoading\n            ? <Loader />\n            : (\n              <>\n                {isLoadingError\n                  ? (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"CommentsError\"\n                    >\n                      Something went wrong\n                    </div>\n                  )\n                  : (\n                    <>\n                      {comments.length === 0\n                        ? (\n                          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                            No comments yet\n                          </p>\n                        )\n                        : (\n                          <>\n                            <p className=\"title is-4\">Comments:</p>\n\n                            {comments.map(comment => (\n                              <article\n                                className={cn(\n                                  'message',\n                                  'is-small',\n                                  {\n                                    'is-loading-custom': (\n                                      deletingCommentId === comment.id\n                                    ),\n                                  },\n                                )}\n                                data-cy=\"Comment\"\n                                key={comment.id}\n                              >\n                                <div className=\"message-header\">\n                                  <a\n                                    href={`mailto:${comment.email}`}\n                                    data-cy=\"CommentAuthor\"\n                                  >\n                                    {comment.name}\n                                  </a>\n                                  <button\n                                    data-cy=\"CommentDelete\"\n                                    type=\"button\"\n                                    className=\"delete is-small\"\n                                    aria-label=\"delete\"\n                                    onClick={() => {\n                                      handleCommentDelete(comment.id);\n                                    }}\n                                  >\n                                    delete button\n                                  </button>\n                                </div>\n\n                                <div\n                                  className=\"message-body\"\n                                  data-cy=\"CommentBody\"\n                                >\n                                  {comment.body}\n                                </div>\n                              </article>\n                            ))}\n                          </>\n                        )}\n                      {!isWritingComment && (\n                        <button\n                          data-cy=\"WriteCommentButton\"\n                          type=\"button\"\n                          className=\"button is-link\"\n                          onClick={() => setIsWritingComment(true)}\n                        >\n                          Write a comment\n                        </button>\n                      )}\n                    </>\n                  )}\n              </>\n            )}\n        </div>\n\n        {(isWritingComment && !isLoadingError) && (\n          <NewCommentForm\n            handleCreateComment={handleCreateComment}\n            isCommentLoading={isCommentLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | null;\n  setSelectedUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n          onBlur={() => setIsActive(false)}\n        >\n          {selectedUser\n            ? (\n              <span>{selectedUser.name}</span>\n            )\n            : (\n              <span>Choose a user</span>\n            )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onMouseDown={() => setSelectedUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [arePostLoading, setArePostLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch {\n      throw new Error('Failed to load users');\n    }\n  };\n\n  const loadPosts = useCallback(async () => {\n    if (selectedUser) {\n      setArePostLoading(true);\n\n      try {\n        const loadedPosts = await getPosts(selectedUser?.id);\n\n        setPosts(loadedPosts);\n        setIsLoadingError(false);\n      } catch {\n        setIsLoadingError(true);\n      } finally {\n        setArePostLoading(false);\n      }\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    loadPosts();\n\n    setSelectedPost(null);\n  }, [selectedUser, loadPosts]);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const noPostCondition = (\n    !arePostLoading\n    && !isLoadingError\n    && !posts.length\n    && selectedUser\n  );\n\n  const postListCondition = (\n    !arePostLoading\n    && !!posts.length\n    && !isLoadingError\n  );\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {arePostLoading && <Loader />}\n\n                {(!arePostLoading && isLoadingError) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPostCondition && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {postListCondition && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  post={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}